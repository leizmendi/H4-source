
Option Compare Database
Option Explicit
    Private m_objDOMPeople As DOMDocument
    'Dim awe As SoapClient30

Public Sub PonXML(ByRef strXML As Variant, strNombreTag As String, vValor As Variant, Optional intSaltoLinea As Integer = True, Optional strAtts As String = "", Optional intSustituye As Integer = False)
    On Error GoTo Error_PonXML
    Dim i As Integer, j As Integer, strTagAtts As String
    strTagAtts = strNombreTag & IIf(strAtts = "", "", " ") & strAtts
    If intSustituye = True Then
        i = InStr(1, strXML, "<" & strTagAtts & ">")
        j = InStr(1, strXML, "</" & strNombreTag & ">")
        If i = 0 Or j = 0 Or (i + Len(strTagAtts) + 2) > j Then GoTo AñadirTag
        strXML = Left(strXML, i + Len(strTagAtts) + 1) & CStr(Nz(vValor, "")) & Mid(strXML, j)
        Exit Sub
    End If
AñadirTag:
    strXML = strXML & IIf(intSaltoLinea, vbCrLf, "") & "<" & strTagAtts & ">" & CStr(Nz(vValor, "")) & "</" & strNombreTag & ">" & IIf(intSaltoLinea, vbCrLf, "")
Bucle:
    i = InStr(strXML, vbCrLf & vbCrLf)
    If i > 0 Then
        strXML = Left(strXML, i - 1) & Mid(strXML, i + 2)
        GoTo Bucle
    End If
Salir_PonXML:
    Exit Sub
Error_PonXML:
    Select Case Err
        Case Else
            MsgBox "Error en PonXML" & vbCrLf & Err.Description
            Resume Salir_PonXML
    End Select
End Sub

Public Function DimeXML(strXML As String, strNombreTag As String, Optional ByRef intInicio As Integer = 1, Optional strReturnAtributos As String, Optional intPosicion As Integer = 1) As Variant
    On Error GoTo Error_DimeXML
    Dim i As Integer, j As Integer, v As Variant, i1 As Integer, p As Integer
    'VerXML strXML
    If intPosicion > 1 Then
        For p = 1 To intPosicion - 1
            i = InStr(IIf(intInicio = 0, 1, intInicio), strXML, "<" & strNombreTag & ">")
            j = DimeDondeCierraTagXML(strXML, strNombreTag, i) 'InStr(IIf(intInicio = 0, 1, intInicio), strXML, "</" & strNombreTag & ">")
            If i = 0 Then
                i = InStr(IIf(intInicio = 0, 1, intInicio), strXML, "<" & strNombreTag & " ")
                If i = 0 Then
                    DimeXML = Null
                    strReturnAtributos = ""
                    intInicio = 0
                    Exit Function
                Else
                    i1 = InStr(i + 1, strXML, ">")
                    If j = 0 Or i1 > j Then
                        DimeXML = Null
                        strReturnAtributos = ""
                        intInicio = 0
                        Exit Function
                    End If
                    'atributos....
                End If
            End If
            'i = InStr(intInicio, strXML, "<" & strNombreTag & ">")
            'j = InStr(intInicio, strXML, "</" & strNombreTag & ">")
            'If i = 0 Or j = 0 Or (i + Len(strNombreTag) + 2) > j Then
            '    DimeXML = Null
            '    Exit Function
            'End If
            intInicio = j + 1
        Next p
    End If
            
    i = InStr(IIf(intInicio = 0, 1, intInicio), strXML, "<" & strNombreTag & ">")
    If i = 0 Then
        i = InStr(IIf(intInicio = 0, 1, intInicio), strXML, "<" & strNombreTag & " ")
        If i = 0 Then
            DimeXML = Null
            strReturnAtributos = ""
            intInicio = 0
            Exit Function
        Else
            'atributos....
        End If
    End If
    intInicio = i
    i1 = InStr(i + 1, strXML, ">")
    '.... atributos
    j = intInicio + Len(strNombreTag) + 1
    strReturnAtributos = Trim(Mid(strXML, j, i1 - j))
    '.... fin atributos
    j = DimeDondeCierraTagXML(strXML, strNombreTag, i) 'InStr(intInicio, strXML, "</" & strNombreTag & ">")
    If j = 0 Then j = InStr(intInicio, strXML, "<" & strNombreTag & "/>")
    If i = 0 Or j = 0 Or (i + Len(strNombreTag) + 2) > j Then
        DimeXML = Null
        Exit Function
    End If
'    intInicio = j
    'i = i + Len(strNombreTag) + 2
    i = i1 + 1
    v = Mid(strXML, i, j - i)
    DimeXML = v
Salir_DimeXML:
    Exit Function
Error_DimeXML:
    Select Case Err
        Case Else
            MsgBox "Error en DimeXML" & vbCrLf & Err.Description
            Resume Salir_DimeXML
    End Select
End Function

Public Function QuitaTagsXML(strXML As String, Optional intInicio As Integer = 1, Optional intQuitaContenidoTag As Integer = True) As Variant
    
    On Error GoTo Error_QuitaTagsXML
    Dim i As Integer, j As Integer, k As Integer, v As Variant
    Dim strR As String, strTag As String, strAux As String
    strR = strXML
    i = InStr(intInicio, strR, "<")
    If i > 0 Then
        j = InStr(i, strR, ">")
        If j > 0 Then
            strTag = Mid(strR, i + 1, j - (i + 1))
            k = InStr(j + 1, strR, "</" & strTag & ">")
            If k > 0 Then
                If intQuitaContenidoTag Then
                    If i > 1 Then
                        strR = Mid(strR, 1, i - 1) & Mid(strR, k + Len(strTag) + 3)
                    Else
                        strR = Mid(strR, k + Len(strTag) + 3)
                    End If
                Else
                    If i > 1 Then
                        strR = Mid(strR, 1, i - 1) & Mid(strR, i + Len(strTag) + 2, k - (i + Len(strTag) + 2)) & Mid(strR, k + Len(strTag) + 3)
                    Else
                        strR = Mid(strR, i + Len(strTag) + 2, k - (i + Len(strTag) + 2)) & Mid(strR, k + Len(strTag) + 3)
                    End If
                End If
            End If
        End If
        QuitaTagsXML = QuitaTagsXML(strR, i, intQuitaContenidoTag)
    Else
        QuitaTagsXML = strR
    End If
Salir_QuitaTagsXML:
    Exit Function
Error_QuitaTagsXML:
    Select Case Err
        Case Else
            MsgBox "Error en QuitaTagsXML" & vbCrLf & Err.Description
            Resume Salir_QuitaTagsXML
    End Select
    
End Function

Public Function ProcesarXML(Path_XML As String, Optional intFile_Str As Integer = 1) As String

On Error GoTo Error_ProcesarXML

    Dim objPeopleRoot As IXMLDOMElement
    Dim objPersonElement As IXMLDOMElement
    Dim ObjElement As IXMLDOMNode

    Dim X As IXMLDOMNodeList
    If intFile_Str = 1 Then
        If Len(Dir(Path_XML)) = 0 Then
           MsgBox "El archivo " & Path_XML & _
                   " No está en el directorio ." & vbNewLine & _
                   " Compruebe la ruta", vbCritical
           Exit Function
        End If
    End If
    'Seteamos la variable
    Set m_objDOMPeople = New DOMDocument

    m_objDOMPeople.resolveExternals = True

    'Para que valide el documento xml
    m_objDOMPeople.validateOnParse = True

    'Carga el documento
    m_objDOMPeople.async = False
    If intFile_Str = 1 Then
        Call m_objDOMPeople.Load(Path_XML)
    Else
        Call m_objDOMPeople.LoadXML(Path_XML)
    End If

    'Comprobamos si se carga
    If m_objDOMPeople.parseError.Reason <> "" Then
        ' si hay un error muestra el fallo
        MsgBox m_objDOMPeople.parseError.Reason
        ProcesarXML = m_objDOMPeople.parseError.Reason
        Exit Function
    End If

    
    Set objPeopleRoot = m_objDOMPeople.DocumentElement
    
    'nos devuelve el nombre del nodo
    Debug.Print objPeopleRoot.nodeName
    'con esto vemos el tipo de nodo
    Debug.Print objPeopleRoot.NodeType
    'nos devuelve el valor del nodo si es aplicable
    Debug.Print objPeopleRoot.NodeValue
    'Propiedad booleana que nos indica si un nodo tiene "hijos"
    Debug.Print objPeopleRoot.HasChildNodes


    Dim index As Integer
    Dim lista As IXMLDOMNodeList
    
    'Le pasamos el Nodo a MuestraNodos
    ProcesarXML = MuestraNodos(m_objDOMPeople.ChildNodes)

Salir_ProcesarXML:
    Exit Function

Error_ProcesarXML:
    Select Case Err
        Case Else
            MsgBox "Error nº " & Err & " en ProcesarXML" & vbCrLf & Err.Description
            Resume Salir_ProcesarXML
    End Select
'LockWindowUpdate 0&
End Function

'Rutina que carga los nodos
Public Function MuestraNodos(ByRef Nodos As IXMLDOMNodeList) As String
On Error GoTo Err_Sub
    Dim TitulilloA As String
    Dim TitulilloB As String
    Dim strR As String
    Dim oNodo As IXMLDOMNode
    Dim oAttr As IXMLDOMAttribute
    
    For Each oNodo In Nodos
        
        If oNodo.NodeType = 1 Then

            TitulilloA = UCase(oNodo.ParentNode.nodeName)

                If TitulilloA <> TitulilloB Then
                    TitulilloB = TitulilloA
                    strR = strR & vbCrLf & _
                    UCase(oNodo.ParentNode.nodeName) & vbCrLf & vbCrLf
                End If

        ElseIf oNodo.NodeType = 4 Or oNodo.NodeType = 3 Then

            
            strR = strR & oNodo.ParentNode.nodeName & _
                                                "=" & oNodo.NodeValue & vbCrLf
        ElseIf oNodo.NodeType = 2 Then
            For Each oAttr In oNodo.ParentNode.Attributes
                strR = strR & oAttr.Name & ";"
            Next oAttr
        End If
    
        'Si ese nodo tiene hijos (campos) se lo autopasa a la funcion
        If oNodo.HasChildNodes Then
            strR = strR & MuestraNodos(oNodo.ChildNodes)
        Else
        End If
    'DoEvents
    Next oNodo
    
    MuestraNodos = strR
    
Exit Function

Err_Sub:

MsgBox Err.Description, vbCritical
'LockWindowUpdate 0&

End Function


Public Function DimeAtributo(strATR As String, strNombreAtr As String) As Variant
    Dim i As Integer, j As Integer, v As Variant, i1 As Integer
    i = InStr(strATR, strNombreAtr & "=""")
    If i = 0 Then
        DimeAtributo = Null
        Exit Function
    End If
    i1 = i + Len(strNombreAtr) + 2
    j = InStr(i1, strATR, """")
    If i = 0 Or j = 0 Or (i + Len(strNombreAtr) + 2) > j Then
        DimeAtributo = Null
        Exit Function
    End If
    i = i1 + 1
    v = Mid(strATR, i1, j - i1)
    DimeAtributo = v
End Function


Public Function DimeStructTXT(strXML As String) As String
    On Error GoTo Error_DimeStructTXT
    Dim i As Integer, j As Integer, strR As String, strM As String, strO As String
    i = 1
    While i > 0
        strM = Nz(DimeXML(strXML, "member", i), "")
        If strM <> "" Then
            strO = "·" & DimeXML(strM, "name") & ": "
            strO = strO & QuitaTagsXML(DimeXML(strM, "value"), , False)
            j = i + Len(strO)
            strR = strR & strO & vbCrLf
            i = j + 1
        Else
            i = 0
        End If
    Wend
    If Len(strR) > 2 Then strR = Left(strR, Len(strR) - 2)
    DimeStructTXT = strR
Salir_DimeStructTXT:
    Exit Function
Error_DimeStructTXT:
    Select Case Err
        Case Else
            MsgBox "error nº " & Err & " en DimeStructTXT" & vbCrLf & Err.Description
            Resume Salir_DimeStructTXT
    End Select
End Function

Public Function DimeDondeCierraTagXML(strXML As String, strTag As String, ByVal intInicio As Integer) As Integer
    On Error GoTo Error_DimeDondeCierraTagXML
    Dim j As Integer, k As Integer, v As Variant
    
BuscaCierre:
    j = InStr(intInicio + 1, strXML, "</" & strTag & ">")
    If j > 0 Then
        k = InStr(intInicio + 1, strXML, "<" & strTag & ">")
        If k > intInicio And k < j Then
            intInicio = j
            GoTo BuscaCierre
        End If
    End If
    DimeDondeCierraTagXML = j
Salir_DimeDondeCierraTagXML:
    Exit Function
Error_DimeDondeCierraTagXML:
    Select Case Err
        Case Else
            MsgBox "Error en DimeDondeCierraTagXML" & vbCrLf & Err.Description
            Resume Salir_DimeDondeCierraTagXML
    End Select
    
End Function

Public Function EliminaElementoXML(ByVal sXml As String, sXPath As String) As String
    On Error GoTo HandleError
    Dim xD As DOMDocument
    'Dim xNodes As IXMLDOMNodeList, xNode As IXMLDOMNode
    Dim sR As String
    Set xD = New DOMDocument
    xD.LoadXML sXml
    sR = sXml
    With xD
        .SelectSingleNode(sXPath).ParentNode.RemoveChild .SelectSingleNode(sXPath)
    End With
Finish:
    EliminaElementoXML = xD.XML
HandleExit:
    Exit Function
HandleError:
    Select Case Err
        Case Else
            MsgBox "Error en EliminaElementoXML" & vbCrLf & Err.Description
            Resume HandleExit
    End Select
    
End Function

Public Function AñadeElementoXML(ByVal sXml As String, sXPath As String, sNuevoElemento As String, sValor As String) As String
    On Error GoTo HandleError
    Dim xD As DOMDocument, xNewElem As IXMLDOMElement
    'Dim xNodes As IXMLDOMNodeList,
    Dim xNode As IXMLDOMNode
    Dim sR As String
    Set xD = New DOMDocument
    xD.LoadXML sXml
    sR = sXml
    Set xNewElem = xD.createElement(sNuevoElemento)
    xNewElem.text = sValor
    Set xNode = xD.SelectSingleNode(sXPath)
    xNode.appendChild xNewElem
Finish:
    AñadeElementoXML = xD.XML
HandleExit:
    Exit Function
HandleError:
    Select Case Err
        Case Else
            MsgBox "Error en AñadeElementoXML" & vbCrLf & Err.Description
            Resume HandleExit
    End Select
    
End Function

Public Function DimeElementoXML(ByVal sXml As String, sSingleTagName As String) As String
    On Error GoTo HandleError
    Dim xD As DOMDocument
    'Dim xE As IXMLDOMElement
    'Dim xNodes As IXMLDOMNodeList, xNode As IXMLDOMNode
    Dim sR As String
    Set xD = New DOMDocument
    xD.LoadXML sXml
    sR = xD.SelectSingleNode(sSingleTagName).text
Finish:
    DimeElementoXML = sR
HandleExit:
    Exit Function
HandleError:
    Select Case Err
        Case Else
            MsgBox "Error en EliminaElementoXML" & vbCrLf & Err.Description
            Resume HandleExit
    End Select
    
End Function