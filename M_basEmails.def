Option Compare Database
Option Explicit

Public Function Envia_Email(strSubject As String, strBody As String, strTo As String, _
                        Optional strCC As String = "", Optional strBCC As String = "", _
                        Optional strAttachs As String = "", Optional strFirma As String = "", _
                        Optional intRegistrarEnvio As Integer = True, _
                        Optional lngIdFactura As Long = 0, Optional lngIdFichaCab As Long = 0, _
                        Optional intMessageSN As Integer = True, Optional strMsgResp As String, Optional intFuerzaAuto As Integer = False, _
                        Optional strHTMLBody As String = "") As Integer
    On Error GoTo Error_Envia_Email
    Dim intR As Integer, strOp As String
    Select Case Nz(DameValorParam("PuestoEnvioEmails_OS"), 1)
    Case 1
    'If Nz(DameValorParam("PuestoEnvioEmails_OS"), 1) = 1 Then
        intR = Mail_with_Attachement(strSubject, strBody, strTo, strCC, strBCC, strAttachs, strFirma, intMessageSN, intFuerzaAuto, strHTMLBody)
        strOp = "Outlook"
    Case 2
    'ElseIf Nz(DameValorParam("PuestoEnvioEmails_OS"), 1) = 2 Then
        intR = send_email(strTo, strCC, strBCC, strSubject, strBody & IIf(strFirma <> "", vbCrLf & strFirma, ""), strAttachs, True, _
                            , , , , , , , , intMessageSN, strMsgResp, strHTMLBody)
        strOp = "SMTP"
    Case 3
    'ElseIf Nz(DameValorParam("PuestoEnvioEmails_OS"), 1) = 2 Then
        intR = SendGrid_Email(strTo, "", strSubject, strBody & vbCrLf & vbCrLf & strFirma, Nz(DameValorParam("SendGridUser"), ""), _
                                Nz(DameValorParam("SendGridPass"), ""), Nz(DameValorParam("SendGridKey"), ""), strAttachs, _
                                Nz(DameValorParam("SendGridRemite"), ""), intMessageSN, strMsgResp, strHTMLBody)
        strOp = "SendGrid"
    Case Else
        intR = Mail_ThunderBird(strSubject, strBody, strTo, strCC, strBCC, strAttachs, strFirma, intMessageSN, intFuerzaAuto, strHTMLBody)
        strOp = "ThunderBird"
    End Select
    Envia_Email = intR
    If intR = True And intRegistrarEnvio Then
        Dim strSQL As String
        strSQL = "INSERT INTO tbEnviosEmail ( Ahora, To, CC, Bcc, Asunto, Body, Firma, Adjuntos, IdFactura, IdFichaCab )"
        strSQL = strSQL & " SELECT Now() as ahora, '" & strTo & "' AS to, '" & strCC & "' AS cc, '" & strBCC & "' AS bcc" _
                        & ", '" & Replace(strSubject, "'", "`") & "' as asunto, '" & Replace(strBody, "'", "`") & "' as body, '" & strFirma & "' as firma" _
                        & ", '" & strAttachs & "' as adjuntos, " & lngIdFactura & " as idfactura, " & lngIdFichaCab & " as idfichacab"
        CurrentDb.Execute strSQL, dbFailOnError
    End If

Salir_Envia_Email:
    Exit Function
Error_Envia_Email:
    Select Case Err
        Case Else
            MsgBox "Error nº " & Err & " en Envia_Email" & vbCrLf & Err.Description
            Resume Salir_Envia_Email
    End Select
End Function

Public Function Mail_with_Attachement(strSubject As String, _
                                      strBody As String, _
                                      strTo As String, _
                                      strCC As String, _
                                      strBCC As String, _
                                      strAttachs As String, strFirma As String, Optional intMessageSN As Integer = True, _
                                      Optional intFuerzaAuto As Integer = False, _
                                      Optional strHTMLBody As String = "") As Integer
    On Error GoTo Error_Mail_with_Attachement
    Dim oO  As New Outlook.Application, i As Integer, j As Integer, intOutlookCreated As Integer
    Dim sAPPPath As String
    If IsAppRunning("Outlook.Application") = True Then    'Outlook was already running
        Set oO = GetObject(, "Outlook.Application")    'Bind to existing instance of Outlook
    Else    'Could not get instance of Outlook, so create a new one
        sAPPPath = GetAppExePath("outlook.exe")    'determine outlook's installation path
        Shell (sAPPPath)    'start outlook
        Do While Not IsAppRunning("Outlook.Application")
            DoEvents
        Loop
        intOutlookCreated = True
        Set oO = GetObject(, "Outlook.Application")   'Bind to existing instance of Outlook
    End If
    
    'On Error Resume Next
    'Set oO = GetObject("Outlook.application")
    'If Err <> 0 Then
    '    Set oO = CreateObject("Outlook.application")
    '    intOutlookCreated = True
    'End If
    'On Error GoTo Error_Mail_with_Attachement
    Dim myMail As Outlook.MailItem, strFile As String
    Set myMail = oO.CreateItem(olMailItem)
    'Set myMail = oO.CreateItemFromTemplate(DirectorioDe(CurrentDb.Name) & "leizmendi.dot")
    With myMail
        .To = strTo
        .CC = strCC
        .Bcc = strBCC
        .Subject = strSubject
        .Body = strBody & IIf(strFirma <> "", vbCrLf & vbCrLf & strFirma, "")
        If strHTMLBody <> "" Then .HTMLBody = strHTMLBody
        
        If Len(strAttachs) > 0 And InStr(1, strAttachs, ";") = 0 Then strAttachs = strAttachs & ";"
        i = InStr(j + 1, strAttachs, ";")
        While i > 0
            strFile = Mid(strAttachs, j + 1, i - (j + 1))
            If Dir(strFile) <> "" Then
                .Attachments.Add strFile
            Else
                MsgBox "No se pudo adjuntar: " & strFile, vbExclamation
            End If
            j = i
            i = InStr(j + 1, strAttachs, ";")
        Wend
    End With
    If Nz(DameValorParam("OutlookEnvioAutoPantalla"), 2) = 2 And Not intFuerzaAuto Then
        myMail.Display
    Else
        myMail.Send
        If intMessageSN Then MsgBox "El Email " & strSubject & " ha sido enviado correctamente a " & strTo, vbInformation, "Email OK"
        If intOutlookCreated Then oO.Quit
    End If
    Mail_with_Attachement = True
    
    'Set oO = Nothing
Salir_Mail_with_Attachement:
    Exit Function
Error_Mail_with_Attachement:
    Select Case Err
        Case Else
            MsgBox "error nº " & Err & " en Mail_with_Attachement" & vbCrLf & Err.Description
            Resume Salir_Mail_with_Attachement
    End Select
End Function


Public Function Mail_ThunderBird(strSubject As String, _
                                strBody As String, _
                                strTo As String, _
                                strCC As String, _
                                strBCC As String, _
                                strAttachs As String, strFirma As String, Optional intMessageSN As Integer = True, _
                                Optional intFuerzaAuto As Integer = False, _
                                Optional strHTMLBody As String = "") As Integer
    On Error GoTo HandleError
    Dim sAPPPath As String, sCommand As String
    sAPPPath = GetAppExePath("thunderbird.exe")    'determine thunderbird's installation path
    strBody = Replace(strBody, "'", "")
    strHTMLBody = Replace(strHTMLBody, "'", "")
    sCommand = ConComillas(sAPPPath) & " -compose to=" & ConComillas(strTo, True) & IIf(strCC <> "", " cc=" & ConComillas(strCC, True), "") _
                                                                                 & IIf(strBCC <> "", " bcc=" & ConComillas(strBCC, True), "") _
                                                                                 & ",subject='" & strSubject & "',preselectid='id1',body=" & IIf(strHTMLBody <> "", ConComillas(strHTMLBody, True), ConComillas(strBody, True)) & _
                                                                                 ",attachment='" & strAttachs & "'"
    Shell sCommand, vbMaximizedFocus
    Mail_ThunderBird = True
HandleExit:
    Exit Function
HandleError:
    Select Case Err
        Case Else
            MsgBox "error nº " & Err & " en Mail_ThunderBird" & vbCrLf & Err.Description
            Resume HandleExit
    End Select
End Function



Public Function send_email(strTo As String, strCC As String, strBCC As String, _
                            strSubject As String, strTextBody As String, _
                            Optional strAttachment As String = "", _
                            Optional smtpusessl As Boolean = True, _
                            Optional sendusing As Integer = 2, _
                            Optional smtpauthenticate As Integer = 1, _
                            Optional smtpconnectiontimeout As Integer = 60, _
                            Optional smtpserver As String = "", _
                            Optional smtpserverport As Integer = 0, _
                            Optional sendusername As String = "", _
                            Optional sendpassword As String = "", _
                            Optional strFrom As String = "", _
                            Optional intMessageSN As Integer = True, Optional strMsgResp As String, _
                            Optional strHTMLBody As String = "")

'a título informativo aquí--------------------------------------------
Const cdoSendUsingPickup = 1
Const cdoSendUsingPort = 2 'Must use this to use Delivery Notification
Const cdoAnonymous = 0
Const cdoBasic = 1 ' clear text
Const cdoNTLM = 2 'NTLM
'Delivery Status Notifications
Const cdoDSNDefault = 0 'None
Const cdoDSNNever = 1 'None
Const cdoDSNFailure = 2 'Failure
Const cdoDSNSuccess = 4 'Success
Const cdoDSNDelay = 8 'Delay
Const cdoDSNSuccessFailOrDelay = 14 'Success, failure or delay
'a título informativo aquí--------------------------------------------

    On Error GoTo Error_send_email
    
    Dim cdomsg As Object
    Dim i As Integer, j As Integer
    Dim strMsgErr As String
    'On Error Resume Next
    Set cdomsg = CreateObject("CDO.message")
    If smtpserver = "" Then smtpserver = Nz(DameValorParam("PuestoSmtpServer"), "")
    If smtpserverport = 0 Then smtpserverport = Nz(DameValorParam("PuestoSmtpServerPort"), 0)
    If sendusername = "" Then sendusername = Nz(DameValorParam("PuestoSmtpUser"), "")
    If sendpassword = "" Then sendpassword = Nz(DameValorParam("PuestoSmtpPassword"), "")
    If strFrom = "" Then strFrom = Nz(DameValorParam("PuestoSmtpRemite"), "")
    If smtpusessl Then smtpusessl = Nz(DameValorParam("PuestoSmtpSSL"), True)
    
    With cdomsg.Configuration.Fields
    .item("http://schemas.microsoft.com/cdo/configuration/sendusing") = 2 'sendusing 'NTLM method
    .item("http://schemas.microsoft.com/cdo/configuration/smtpserver") = smtpserver
    .item("http://schemas.microsoft.com/cdo/configuration/smptserverport") = smtpserverport
    .item("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate") = smtpauthenticate
    .item("http://schemas.microsoft.com/cdo/configuration/smtpusessl") = smtpusessl
    .item("http://schemas.microsoft.com/cdo/configuration/smtpconnectiontimeout") = smtpconnectiontimeout
    .item("http://schemas.microsoft.com/cdo/configuration/sendusername") = sendusername
    .item("http://schemas.microsoft.com/cdo/configuration/sendpassword") = sendpassword
    .Update
    End With
    ' build email parts
    If strTo = "" Then strTo = strFrom
    With cdomsg
        .From = strFrom
        .To = strTo
        If (Len(strAttachment) > 0) Then
            strAttachment = strAttachment & ";"
bucle_adjuntos:
            j = i + 1
            i = InStr(j, strAttachment, ";")
            If i > 0 Then
                .AddAttachment Mid(strAttachment, j, i - j)
                GoTo bucle_adjuntos
            End If
        End If
    '    If (Len(strHTMLBody) > 0) Then .HTMLBody = strHTMLBody                '"<H4>See attached file</H4>"
        If strBCC = "" Then strBCC = Nz(DameValorParam("PuestoSmtpEnviarTambienA"), "")
        If (Len(strBCC) > 0) Then .Bcc = strBCC
        If (Len(strCC) > 0) Then .CC = strCC
        If (Len(strSubject) > 0) Then .Subject = strSubject
        If (Len(strTextBody) > 0) Then .TextBody = strTextBody
        If (Len(strHTMLBody) > 0) Then .HTMLBody = strHTMLBody
    
    .Send
    End With
    Set cdomsg = Nothing
Salir_send_email:
    If strMsgErr <> "" Then
        strMsgResp = "No se ha podido enviar el email. -> Error: " + strMsgErr
        If intMessageSN Then MsgBox strMsgResp, vbExclamation, "Falló el envío"
        send_email = False
    Else
        strMsgResp = "El email a " & Trim(strTo & " " & strCC & " " & strBCC) & " se ha enviado correctamente."
        If intMessageSN Then MsgBox strMsgResp, vbInformation, "Email OK"
        send_email = True
    End If
    Exit Function
Error_send_email:
    Select Case Err
        Case Else
            strMsgErr = "Error nº " & Err & " en send_email" & vbCrLf & Err.Description
            Resume Salir_send_email
    End Select
End Function


Public Function SendGrid_Email(strTo As String, strToName As String, _
                            strSubject As String, strTextBody As String, _
                            strSendGridUser As String, _
                            strSendGridPassword As String, _
                            strSendGridKey As String, _
                            Optional strAttachs As String = "", _
                            Optional strFrom As String = "", _
                            Optional intMessageSN As Integer = True, Optional strMsgResp As String, _
                            Optional strHTMLBody As String = "") As Integer

On Error GoTo Error_SendGrid_Email

    Dim EmailStatus As String
    Dim SHSM As SixHatSendMail
    Set SHSM = New SixHatSendMail
    Dim i As Integer, j As Integer, strFile As String
    With SHSM
        .SendGridUser = strSendGridUser
        .sendgridpassword = strSendGridPassword
        .SendGridKey = strSendGridKey
        
        .EmailTo strTo, strToName
        .EmailCC strFrom, ""
        '.EmailCC "leizmendi@gmail.com", "LORENZO"
        '.EmailBCC Me.txtBCC, Me.txtBCCName
        .EmailFrom = strFrom
        .EmailSubject = strSubject
        .EmailText = strTextBody
        If strHTMLBody = "" Then
            .EmailBody strTextBody, False
        Else
            .EmailBody strHTMLBody, True
        End If
        ' Add Attachment(Must Be Full Path To File Including File Name)
        If Len(strAttachs) > 0 And Right(strAttachs, 1) <> ";" Then strAttachs = strAttachs & ";"
        i = InStr(j + 1, strAttachs, ";")
        While i > 0
            strFile = Mid(strAttachs, j + 1, i - (j + 1))
            If Dir(strFile) <> "" Then
                .EmailAttachment = strFile
                '.Attachments.Add strFile
            Else
                MsgBox "No se pudo adjuntar: " & strFile, vbExclamation
            End If
            j = i
            i = InStr(j + 1, strAttachs, ";")
        Wend
        
'        .EmailAttachment = strAttachment
        ' Send Email
        .SendEmail
        ' Return Sent Email Status
         EmailStatus = .EmailStatus
         If EmailStatus = "success" Then
            strMsgResp = "El Email " & strSubject & " ha sido enviado correctamente a " & strTo
            If intMessageSN Then MsgBox strMsgResp, vbInformation, "Email OK"
            SendGrid_Email = True
         Else
            strMsgResp = "El Email no ha sido enviado. Respuesta del servidor: " & EmailStatus
            If intMessageSN Then MsgBox strMsgResp, vbExclamation, "Falló el envío"
            SendGrid_Email = False
        End If
    End With
Salir_SendGrid_Email:
    Exit Function
Error_SendGrid_Email:
    Select Case Err
        Case Else
            MsgBox "Error nº " & Err & " en SendGrid_Email" & vbCrLf & Err.Description
            Resume Salir_SendGrid_Email
    End Select
End Function


Public Function DimeEmailCli(strNIF As String, Optional intSiNoHayPedir As Integer = True) As String
    Dim strR As String
    strR = Nz(DLookup("Email", "tbClientes", "NIF = " & ConComillas(strNIF)), "")
    If strR = "" And intSiNoHayPedir Then strR = Nz(myInputBox("Introduzca Email de Envío", "Dirección de Email:"), "")
    DimeEmailCli = strR
End Function

Public Function EnviarFacturaXEmail(lngIdFactura As Long, Optional strEmail As String = "", Optional intInputBox As Integer = True, _
                                    Optional intMessageSN As Integer = True, Optional strMsgResp As String, Optional strListaFacs As String = "") As Integer
    On Error GoTo Error_EnviarFacturaXEmail

    Dim strFac As String, strPdfFac As String, strMensaje As String, dtIni As Date, lS As Long, intR As Integer, lngIdFichaCab As Long
    Dim strAsunto As String
    If strEmail = "" Then
        strEmail = DimeEmailCli(Nz(DLookup("NIF", "tbFacturasCab", "IdFactura = " & lngIdFactura), ""))
        'Nz(DLookup("Email", "tbClientes", "NIF = " & ConComillas(Nz(DLookup("NIF", "tbFacturasCab", "IdFactura = " & lngIdFactura), ""))), "")
        If strEmail = "" Then
            strMsgResp = "No se ha indicado dirección de email de envío" & vbCrLf & Nz(DLookup("NIF", "tbFacturasCab", "IdFactura = " & lngIdFactura), "")
            If intMessageSN Then MsgBox "No se ha indicado dirección de email de envío", vbExclamation
            GoTo Salir_EnviarFacturaXEmail
        End If
    End If
    strFac = Nz(DLookup("NumeroDeFactura", "tbFacturasCab", "IdFactura = " & lngIdFactura), "")
    If strFac <> "" Then
        strPdfFac = Dime_GenFacPDF(lngIdFactura) ' DameValorParam("AplicacionCarpetaDatos") & "facs\" & DLookup("[Serie]", "tbFacturasCab", "IdFactura = " & Nz(lngIdFactura, 0)) & SoloNum(strFac) & ".pdf"
        'If Dir(strPdfFac) <> "" Then
        '    intR = vbNo 'MsgBox("¿Volver a generar la factura " & strFac & "?", vbYesNoCancel + vbQuestion)
        '    If intR = vbCancel Then Exit Function
        '    If intR = vbNo Then GoTo EnviarEmail
        'End If
        strListaFacs = strPdfFac & ";"
    Else
        If strListaFacs = "" Then
            strMsgResp = "No se encontró Factura Id: " & lngIdFactura
            If intMessageSN Then MsgBox strMsgResp, vbExclamation
            Exit Function
        End If
        Dim vFacs As Variant, i As Integer
        If Right(strListaFacs, 1) = ";" Then strListaFacs = RecDerTop(strListaFacs, 1, 0)
        vFacs = Split(strListaFacs, ";")
        strListaFacs = ""
        For i = 0 To UBound(vFacs)
            lngIdFactura = CLng(vFacs(i))
            strPdfFac = Dime_GenFacPDF(lngIdFactura)
            strListaFacs = strListaFacs & strPdfFac & ";"
        Next i
    End If
    'ImprimirFactura lngIdFactura, 4, strPdfFac
EnviarEmail:
    Dim strAdjuntarFicheros As String
    strAdjuntarFicheros = strListaFacs 'strPdfFac & ";"
    If PonParrafoEnvioFacturaEmail(lngIdFactura, strAdjuntarFicheros, intInputBox) = False Then
        strMsgResp = "Se canceló el envío de factura por email"
        If intMessageSN Then MsgBox strMsgResp, vbExclamation
        GoTo Salir_EnviarFacturaXEmail
    End If
    strMensaje = Nz(DameValorParam("ParrafoEnvioFacturaEmail_OK"), "Adjuntamos factura")
    strAsunto = "Factura: " & strFac
    If intInputBox Then
        strEmail = Nz(myInputBox("Enviar a email:", "Dirección de email donde enviar:", strEmail), "")
        
        strAsunto = Nz(myInputBox("Asunto:", "Asunto del mensaje:", "Factura: " & strFac), "")
        If strAsunto = "" Then GoTo Salir_EnviarFacturaXEmail
    End If

    If InStr(strAdjuntarFicheros, strPdfFac) > 0 Then
        dtIni = Now
        While Dir(strPdfFac) = "" And lS < 30
            DoEvents
            lS = DateDiff("s", Now, dtIni)
            SysCmd acSysCmdSetStatus, lS
        Wend
    End If
    lngIdFichaCab = Nz(DLookup("IdFichaCab", "tbFichasCab", "IdFactura = " & lngIdFactura), 0)
    If lngIdFichaCab = 0 Then lngIdFichaCab = Nz(DLookup("IdFrom", "tbCajaDet", "Origen = 'E' AND IdFParcial = " & lngIdFactura), 0)
    EnviarFacturaXEmail = Envia_Email(strAsunto, strMensaje, strEmail, , , strAdjuntarFicheros, , , lngIdFactura, lngIdFichaCab, intMessageSN, strMsgResp)
Salir_EnviarFacturaXEmail:
    Exit Function
Error_EnviarFacturaXEmail:
    Select Case Err
        Case Else
            strMsgResp = strMsgResp & vbCrLf & "Error nº " & Err & " en EnviarFacturaXEmail, Factura: " & strFac & vbCrLf & Err.Description
            If intMessageSN = True Then MsgBox strMsgResp, vbExclamation
            Resume Salir_EnviarFacturaXEmail
    End Select

End Function

Function Dime_GenFacPDF(lngIdFactura As Long) As String
    On Error GoTo HandleError
    Dim strFac As String, intR As Integer, strPdfFac  As String
    strFac = Nz(DLookup("NumeroDeFactura", "tbFacturasCab", "IdFactura = " & lngIdFactura), "")
    If strFac <> "" Then
        strPdfFac = DameValorParam("AplicacionCarpetaDatos") & "facs\" & DLookup("[Serie]", "tbFacturasCab", "IdFactura = " & Nz(lngIdFactura, 0)) & SoloNum(strFac) & ".pdf"
        If Dir(strPdfFac) <> "" Then
            If Nz(DameValorParam("FacturasPDFSobreescribirSN"), False) = True Then
                intR = vbYes
            Else
                intR = MsgBox("¿Volver a generar la factura " & strFac & "?", vbYesNoCancel + vbQuestion)
                If intR = vbCancel Then GoTo HandleExit
                If intR = vbNo Then GoTo Finish
            End If
        End If
        ImprimirFactura lngIdFactura, 4, strPdfFac, , False
    End If
    
Finish:
    Dime_GenFacPDF = strPdfFac
    
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function


Public Function EnviarFacturaXEmail_Recibo(lngNumRecibo As Long, Optional intMessageSN As Integer = True, Optional strMsgResp As String) As Integer
    On Error GoTo Error_EnviarFacturaXEmail_Recibo
    Dim lngIdFactura As Long
    
    lngIdFactura = Nz(DLookup("IdFactura", "tbFichasPagosPrevistos", "NumRecibo = " & lngNumRecibo), 0)
    If lngIdFactura <> 0 Then EnviarFacturaXEmail_Recibo = EnviarFacturaXEmail(lngIdFactura, , False, intMessageSN, strMsgResp)
        
Salir_EnviarFacturaXEmail_Recibo:
    Exit Function
Error_EnviarFacturaXEmail_Recibo:
    Select Case Err
        Case Else
            MsgBox "Error nº " & Err & " en EnviarFacturaXEmail_Recibo" & vbCrLf & Err.Description
            Resume Salir_EnviarFacturaXEmail_Recibo
    End Select

End Function


Public Function EnviaRecordatorioReserva(lngIdFichaCab As Long, Optional intInputBox As Integer = False, _
                                    Optional intMessageSN As Integer = True, Optional strMsgResp As String, Optional intFuerzaAuto As Integer = False) As Integer
    On Error GoTo HandleError
    Dim lngIdIdioma As Long, strEmail As String
    Dim strAsunto As String, strMensaje As String, strAdjuntarFicheros As String
    strEmail = Nz(DLookup("Email", "tbFichasCab", "IdFichaCab = " & lngIdFichaCab), "")
    If strEmail = "" And Not intInputBox Then
        strMsgResp = "La Ficha " & lngIdFichaCab & " no tiene Email para envío"
        If intMessageSN Then MsgBox strMsgResp, vbExclamation
        GoTo HandleExit
    End If
    lngIdIdioma = Nz(DLookup("IdIdioma", "tbFichasCab", "IdFichaCab = " & lngIdFichaCab), 0)
    strMensaje = DimeParrafoRecordatorioReserva(lngIdFichaCab, lngIdIdioma)
    If lngIdIdioma = 0 Then
        strAsunto = Nz(DameValorParam("FichasRecordatorioAsuntoEmail"), "Recordatorio reserva")
        If strMensaje = "" Then
            strMsgResp = "No está definido el mensaje de recordatorio en Parámetros-Fichas-Recordatorio"
            If intMessageSN Then MsgBox strMsgResp, vbExclamation
            GoTo HandleExit
        End If
    Else
        strAsunto = Nz(DameValorParam("FichasRecordatorioAsuntoEmail_IdIdioma_" & lngIdIdioma), "Recordatorio reserva")
        If strMensaje = "" Then
            strMsgResp = "No está definido el mensaje de recordatorio en Parámetros-Fichas-Recordatorio para el idioma seleccionado"
            If intMessageSN Then MsgBox strMsgResp, vbExclamation
            GoTo HandleExit
        End If
    End If
    'If g_PoliCheckIn And Nz(DameValorParam("FichasSMSRecordatorioIncluirEnlaceSN"), False) Then
    '    Dim strUrl As String, strBookerUrl As String, intOK As Integer
    '    intOK = DameCheckinURL(lngIdFichaCab, strBookerUrl, strUrl)
    '    If intOK Then
    '        strMensaje = strMensaje & vbCrLf & vbCrLf & "Check-in online: Titular (booker)-> " & strBookerUrl & vbCrLf & vbTab & "Acompañante/s-> " & strUrl
    '    Else
    '        strMensaje = strMensaje & vbCrLf & vbCrLf & "Check-in online: error al generar enlace!"
    '    End If
    'End If
    strAdjuntarFicheros = Nz(DameValorParam("FichasRecordatorioAdjuntarFicheros"), "")
    If intInputBox = True Then
        strMensaje = Nz(myInputBox(strAsunto, "Confirme mensaje a enviar", strMensaje, , False, strAdjuntarFicheros), "")
        If strMensaje = "" Then GoTo HandleExit
        strEmail = Nz(myInputBox(strAsunto, "Confirme email", strEmail, , False), "")
        If strEmail = "" Then GoTo HandleExit
    End If
    EnviaRecordatorioReserva = Envia_Email(strAsunto, strMensaje, strEmail, , , strAdjuntarFicheros, , True, , lngIdFichaCab, intMessageSN, strMsgResp, intFuerzaAuto)
    If EnviaRecordatorioReserva = True Then CurrentDb.Execute "UPDATE tbFichasCab SET EnviarRecordatorioSN=False WHERE IdFichaCab = " & lngIdFichaCab, dbFailOnError
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function

Public Sub EnviaRecordatorios()
    On Error GoTo HandleError
    Dim strSQL As String, rs As Recordset, intDA As Integer, i As Integer, j As Integer, strMSG As String, y As Long, z As Long
    intDA = Nz(DameValorParam("FichasRecordatorioEntradaDiasAntelacion"), 7)
    strSQL = "SELECT IdFichaCab FROM tbFichasCab"
    strSQL = strSQL & " WHERE EstadoFicha = 1 AND Nz(EnviarRecordatorioSN,False)=True"
    strSQL = strSQL & " AND FechaLlegada - Date() <= " & intDA
    Set rs = CurrentDb.OpenRecordset(strSQL, dbOpenSnapshot)
    If rs.EOF Then GoTo HandleExit
    rs.MoveLast
    rs.MoveFirst
    z = rs.RecordCount
    While Not rs.EOF
        y = y + 1
        SysCmd acSysCmdSetStatus, "Envía recordatorios " & y & "/" & z
        If EnviaRecordatorioReserva(rs("IdFichaCab"), False, False, strMSG, True) = True Then
            i = i + 1
        Else
            j = j + 1
        End If
        rs.MoveNext
    Wend
    If Len(strMSG) > 0 Then strMSG = strMSG & vbCrLf
    If i > 0 Then strMSG = strMSG & "Se " & IIf(i = 1, "envió ", "enviaron ") & i & " recordatorio" & IIf(i = 1, "", "s") & vbCrLf
    If j > 0 Then strMSG = strMSG & "No se " & IIf(j = 1, "pudo", "pudieron") & " enviar " & j & " recordatorio" & IIf(j = 1, "", "s") & vbCrLf
    If Len(strMSG) > 0 Then MsgBox strMSG, vbInformation
    
HandleExit:
    SysCmd acSysCmdClearStatus
    Exit Sub
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Sub



'---------------------------------------------------------------------------------------
' Procedure : StartOutlook
' Author    : Daniel Pineault, CARDA Consultants Inc.
' Website   : http://www.cardaconsultants.com
' Purpose   : Demonstration of how one can start outlook if it isn't already started
'             considering CreateObject("Outlook.Application") not longer works!
' Copyright : The following may be altered and reused as you wish so long as the
'             copyright notice is left unchanged (including Author, Website and
'             Copyright).  It may not be sold/resold or reposted on other sites (links
'             back to this site are allowed).
'
' Usage:
' ~~~~~~
'
'
' Revision History:
' Rev       Date(yyyy/mm/dd)        Description
' **************************************************************************************
' 1         2014-Oct-31                 Initial Release
'---------------------------------------------------------------------------------------
Function StartOutlook()
    On Error GoTo Error_Handler
    Dim oOutlook        As Object
    Dim sAPPPath        As String
 
    If IsAppRunning("Outlook.Application") = True Then    'Outlook was already running
        Set oOutlook = GetObject(, "Outlook.Application")    'Bind to existing instance of Outlook
    Else    'Could not get instance of Outlook, so create a new one
        sAPPPath = GetAppExePath("outlook.exe")    'determine outlook's installation path
        Shell (sAPPPath)    'start outlook
        Do While Not IsAppRunning("Outlook.Application")
            DoEvents
        Loop
        Set oOutlook = GetObject(, "Outlook.Application")    'Bind to existing instance of Outlook
    End If
 
    '    MsgBox "Outlook Should be running now, let's do something"
    Const olMailItem = 0
    Dim oOutlookMsg     As Object
    Set oOutlookMsg = oOutlook.CreateItem(olMailItem)    'Start a new e-mail message
    oOutlookMsg.Display    'Show the message to the user
 
Error_Handler_Exit:
    On Error Resume Next
    Set oOutlook = Nothing
    Exit Function
 
Error_Handler:
    MsgBox "The following error has occured" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Error Source: StartOutlook" & vbCrLf & _
           "Error Description: " & Err.Description _
           , vbOKOnly + vbCritical, "An Error has Occured!"
    Resume Error_Handler_Exit
End Function
 
'---------------------------------------------------------------------------------------
' Procedure : IsAppRunning
' Author    : Daniel Pineault, CARDA Consultants Inc.
' Website   : http://www.cardaconsultants.com
' Purpose   : Determine is an App is running or not
' Copyright : The following may be altered and reused as you wish so long as the
'             copyright notice is left unchanged (including Author, Website and
'             Copyright).  It may not be sold/resold or reposted on other sites (links
'             back to this site are allowed).
'
' Input Variables:
' ~~~~~~~~~~~~~~~~
' sApp      : GetObject Application to verify if it is running or not
'
' Usage:
' ~~~~~~
' IsAppRunning("Outlook.Application")
' IsAppRunning("Excel.Application")
' IsAppRunning("Word.Application")
'
' Revision History:
' Rev       Date(yyyy/mm/dd)        Description
' **************************************************************************************
' 1         2014-Oct-31                 Initial Release
'---------------------------------------------------------------------------------------
Function IsAppRunning(sApp As String) As Boolean
    On Error GoTo Error_Handler
    Dim oApp            As Object
 
    Set oApp = GetObject(, sApp)
    IsAppRunning = True
 
Error_Handler_Exit:
    On Error Resume Next
    Set oApp = Nothing
    Exit Function
 
Error_Handler:
    Resume Error_Handler_Exit
End Function
 
'---------------------------------------------------------------------------------------
' Procedure : GetAppExePath
' Author    : Daniel Pineault, CARDA Consultants Inc.
' Website   : http://www.cardaconsultants.com
' Purpose   : Determine the path for a given exe installed on the local computer
' Copyright : The following may be altered and reused as you wish so long as the
'             copyright notice is left unchanged (including Author, Website and
'             Copyright).  It may not be sold/resold or reposted on other sites (links
'             back to this site are allowed).
'
' Input Variables:
' ~~~~~~~~~~~~~~~~
' sEXEName  : Name of the exe to locate
'
' Usage:
' ~~~~~~
' Call GetAppExePath("msaccess.exe")
' GetAppExePath("firefox.exe")
' GetAppExePath("outlook.exe")
'
' Revision History:
' Rev       Date(yyyy/mm/dd)        Description
' **************************************************************************************
' 1         2014-Oct-31                 Initial Release
'---------------------------------------------------------------------------------------
Function GetAppExePath(ByVal sExeName As String) As String
    On Error GoTo Error_Handler
    Dim WSHShell        As Object
 
    Set WSHShell = CreateObject("Wscript.Shell")
    GetAppExePath = WSHShell.RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\" & sExeName & "\")
 
Error_Handler_Exit:
    On Error Resume Next
    Set WSHShell = Nothing
    Exit Function
 
Error_Handler:
    If Err.Number = -2147024894 Then
        'Cannot locate requested exe????
    Else
        MsgBox "The following error has occured." & vbCrLf & vbCrLf & _
               "Error Number: " & Err.Number & vbCrLf & _
               "Error Source: GetAppExePath" & vbCrLf & _
               "Error Description: " & Err.Description, _
               vbCritical, "An Error has Occured!"
    End If
    Resume Error_Handler_Exit
End Function


'---------------------------------------------------------------------------------------
' Procedure : Outlook_OpenEmail
' Author    : Daniel Pineault, CARDA Consultants Inc.
' Website   : http://www.cardaconsultants.com
' Purpose   : Locate and open an Item based on its EntryId
' Copyright : The following is release as Attribution-ShareAlike 4.0 International
'             (CC BY-SA 4.0) - https://creativecommons.org/licenses/by-sa/4.0/
' Req'd Refs: Uses Late Binding, so none required
'
' Input Variables:
' ~~~~~~~~~~~~~~~~
' sEntryId - The EntryId of the Outlook Item to locate and display to the user
'
' Usage:
' ~~~~~~
' Outlook_OpenEmail "000000004829439D8D28C14BAA8D1C72F0D28EA6E4552500"
'
' Revision History:
' Rev       Date(yyyy/mm/dd)        Description
' **************************************************************************************
' 1         2019-08-19              Initial Release (Blog help)
'---------------------------------------------------------------------------------------
Function Outlook_OpenEmail(ByVal sEntryId As String)
'REF: https://docs.microsoft.com/en-us/office/vba/api/outlook.namespace.getitemfromid
'    #Const EarlyBind = 1 'Use Early Binding
    #Const EarlyBind = 0    'Use Late Binding
    #If EarlyBind Then
        Dim oOutlook          As Outlook.Application
        Dim oOutlookMsg       As Outlook.MailItem
        Dim oNameSpace        As Outlook.Namespace
    #Else
        Dim oOutlook          As Object
        Dim oOutlookMsg       As Object
        Dim oNameSpace        As Object
    #End If
 
    On Error Resume Next
    Set oOutlook = GetObject(, "Outlook.Application")        'Bind to existing instance of Outlook
    If Err.Number <> 0 Then        'Could not get instance, so create a new one
        Err.Clear
        Set oOutlook = CreateObject("Outlook.Application")
    End If
    On Error GoTo Error_Handler
 
    Set oNameSpace = oOutlook.GetNamespace("MAPI")
    'Find the item, if not found it generates a -2147221233 error
    Set oOutlookMsg = oNameSpace.GetItemFromID(sEntryId)
    'Open/Display the item to the user
    oOutlookMsg.Display
 
Error_Handler_Exit:
    On Error Resume Next
    If Not oOutlookMsg Is Nothing Then Set oOutlookMsg = Nothing
    If Not oOutlook Is Nothing Then Set oOutlook = Nothing
    Exit Function
 
Error_Handler:
    If Err.Number = "287" Then
        MsgBox "You clicked No to the Outlook security warning. " & _
               "Rerun the procedure and click Yes to access e-mail " & _
               "addresses to send your message. For more information, " & _
               "see the document at http://www.microsoft.com/office" & _
               "/previous/outlook/downloads/security.asp."
    ElseIf Err.Number = -2147221233 Then
        MsgBox "Outlook item not found.", vbInformation + vbOKOnly
    Else
        MsgBox "The following error has occured" & vbCrLf & vbCrLf & _
               "Error Number: " & Err.Number & vbCrLf & _
               "Error Source: Outlook_OpenEmail" & vbCrLf & _
               "Error Description: " & Err.Description & _
               Switch(Erl = 0, "", Erl <> 0, vbCrLf & "Line No: " & Erl) _
               , vbOKOnly + vbCritical, "An Error has Occured!"
    End If
    Resume Error_Handler_Exit
End Function

Public Function PonNotificacionPEN(lngIdFichaCab As Long, iNumNoti As Integer, sPEN As String) As Boolean
    On Error GoTo HandleError
    Dim sNotiPEN As String, i As Integer, sSQL As String
    sNotiPEN = Nz(DLookup("NotificacionesPEN", "tbFichasCab_Totales", "IdFichacab = " & lngIdFichaCab), "")
    i = InStr(sNotiPEN, "n_" & iNumNoti & ":")
    If i = 0 Then
        sNotiPEN = sNotiPEN & "n_" & iNumNoti & ":" & sPEN
    Else
        Mid(sNotiPEN, i + 4, 1) = sPEN
    End If
    sSQL = "UPDATE tbFichasCab_Totales SET NotificacionesPEN = " & ConComillas(sNotiPEN) & " WHERE IdFichaCab = " & lngIdFichaCab
    CurrentDb.Execute sSQL, dbFailOnError
    PonNotificacionPEN = True
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function

Public Function DimeNotificacionPEN(lngIdFichaCab As Long, iNumNoti As Integer) As String
    On Error GoTo HandleError
    Dim sNotiPEN As String, i As Integer, sSQL As String
    sNotiPEN = Nz(DLookup("NotificacionesPEN", "tbFichasCab_Totales", "IdFichacab = " & lngIdFichaCab), "")
    i = InStr(sNotiPEN, "n_" & iNumNoti & ":")
    If i = 0 Then
        sNotiPEN = "P"
    Else
        sNotiPEN = Mid(sNotiPEN, i + 4, 1)
    End If
    DimeNotificacionPEN = sNotiPEN
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function

Public Function DimeNotificacionIdioma(iNumNoti As Integer, lIdIdioma As Long, sMensaje As String, sAsunto As String, sAdjuntos As String) As Boolean
    On Error GoTo HandleError
    sMensaje = Nz(DameValorParam("Notificacion_" & iNumNoti & "_Mensaje_IdIdioma_" & lIdIdioma), "")
    If sMensaje = "" Then sMensaje = Nz(DameValorParam("Notificacion_" & iNumNoti & "_Mensaje"), "")
    sAsunto = Nz(DameValorParam("Notificacion_" & iNumNoti & "_Asunto_IdIdioma_" & lIdIdioma), "")
    If sAsunto = "" Then sAsunto = Nz(DameValorParam("Notificacion_" & iNumNoti & "_Asunto"), "")
    sAdjuntos = Nz(DameValorParam("Notificacion_" & iNumNoti & "_AdjuntarFicheros_IdIdioma_" & lIdIdioma), "")
    If sAdjuntos = "" Then sAdjuntos = Nz(DameValorParam("Notificacion_" & iNumNoti & "_AdjuntarFicheros"), "")
    DimeNotificacionIdioma = True
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function

Public Function EnviaNotificacion(lngIdFichaCab As Long, iNumNoti As Integer, Optional intInputBox As Integer = False, _
                                    Optional intMessageSN As Integer = True, Optional strMsgResp As String, Optional intFuerzaAuto As Integer = False) As Integer
    On Error GoTo HandleError
    Dim lngIdIdioma As Long, strEmail As String
    Dim sAsunto As String, sMensaje As String, sAdjuntos As String
    strEmail = Nz(DLookup("Email", "tbFichasCab", "IdFichaCab = " & lngIdFichaCab), "")
    If strEmail = "" And Not intInputBox Then
        strMsgResp = "La Ficha " & lngIdFichaCab & " no tiene Email para envío"
        If intMessageSN Then MsgBox strMsgResp, vbExclamation
        GoTo HandleExit
    End If
    lngIdIdioma = Nz(DLookup("IdIdioma", "tbFichasCab", "IdFichaCab = " & lngIdFichaCab), 0)
    If DimeParrafoNotificacion(iNumNoti, lngIdFichaCab, lngIdIdioma, sMensaje, sAsunto, sAdjuntos) = False Then
        MsgBox "No se obtuvo el Mensaje de la notificación Nº " & iNumNoti & " de la ficha Nº " & lngIdFichaCab, vbExclamation
        GoTo HandleExit
    End If
    If intInputBox = True Then
        sAsunto = Nz(myInputBox(sAsunto, "Confirme Asunto del mensaje a enviar", sAsunto, , False), "")
        If sAsunto = "" Then GoTo HandleExit
        sMensaje = Nz(myInputBox(sAsunto, "Confirme mensaje a enviar", sMensaje, , False, sAdjuntos), "")
        If sMensaje = "" Then GoTo HandleExit
        strEmail = Nz(myInputBox(sAsunto, "Confirme email", strEmail, , False), "")
        If strEmail = "" Then GoTo HandleExit
    End If
    EnviaNotificacion = Envia_Email(sAsunto, sMensaje, strEmail, , , sAdjuntos, , True, , lngIdFichaCab, intMessageSN, strMsgResp, intFuerzaAuto)
    If EnviaNotificacion = True Then PonNotificacionPEN lngIdFichaCab, iNumNoti, "E"
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function

Public Function EnviaNotificaciones()
    
    DoCmd.OpenForm "frmEnvioNotificaciones", , , , , acDialog
End Function

Public Sub Genera_auxNotificaciones()
    On Error GoTo HandleError
    Dim strSQL As String, rs As Recordset, i As Integer, j As Integer, strMSG As String, y As Long, z As Long
    Dim rsF As Recordset, iAD As Integer, iDias As Integer, dt As Date, iNumNoti As Integer
    Dim sLMX As String, sD As String, bF As Boolean
    
    CurrentDb.Execute "DELETE * FROM auxNotificaciones", dbFailOnError
    
    strSQL = "SELECT cfgParam.NP, cfgParam.VP, IIf(Nz(damevalorparam([NP] & '_SN'),True),'S','N') AS [S-N]" & _
             " FROM cfgParam" & _
             " WHERE (((cfgParam.NP) Like 'Notificacion_?'))" & _
             " AND Nz(DameValorParam([NP] & '_SN'),True)=True"
    Set rs = CurrentDb.OpenRecordset(strSQL, dbOpenSnapshot)
    If rs.EOF Then GoTo HandleExit
    Dim bVerSinEmail As Boolean, bSoloRecordatorioS As Boolean
    bVerSinEmail = Nz(DameValorParam("NotificacionesVerSinEmailSN"), False)
    bSoloRecordatorioS = Nz(DameValorParam("NotificacionesSoloRecordatorioS"), False)
    rs.MoveLast
    rs.MoveFirst
    z = rs.RecordCount
    bF = DiaD(Date, , , True) = "F"
    sD = DiaD(Date)
    While Not rs.EOF
        sLMX = Nz(DameValorParam(rs("NP") & "_LMX"), "")
        If sLMX <> "" Then
            If InStr(sLMX, sD) = 0 Then
                If Not bF Then
                    GoTo Siguiente
                Else
                    If InStr(sLMX, "F") = 0 Then GoTo Siguiente
                End If
            End If
        End If
                    
                    
                    
        iAD = Nz(DameValorParam(rs("NP") & "_AntesDespues"), 1)
        iDias = Nz(DameValorParam(rs("NP") & "_Dias"), 0)
        iNumNoti = Right(rs("NP"), 1)
        strSQL = "SELECT IdFichaCab, Email, NombreCliente & ' ' & ApellidosCliente as Cliente, FechaLlegada, FechaSalida, Adultos + Niños as Pax FROM tbFichasCab"
        If iAD = 1 Then
            strSQL = strSQL & " WHERE CLng(Nz(FechaLlegada)) - " & CLng(Date) & " Between 0 AND " & iDias
        Else
            strSQL = strSQL & " WHERE " & CLng(Date) & " - CLng(Nz(FechaSalida)) Between  " & iDias & " AND " & iDias + 6
        End If
        strSQL = strSQL & " AND EstadoFicha<>9"
        If bVerSinEmail = False Then strSQL = strSQL & " AND Nz(Email,'')<>''"
        If bSoloRecordatorioS = True Then strSQL = strSQL & " AND Nz(EnviarRecordatorioSN,False)=True"
        
        Set rsF = CurrentDb.OpenRecordset(strSQL, dbOpenSnapshot)
        While Not rsF.EOF
            If DimeNotificacionPEN(rsF("IdFichaCab"), iNumNoti) = "P" Then
                strSQL = "INSERT INTO auxNotificaciones(IdFichaCab, NumNoti, Email, Cliente, Entrada, Salida, Pax)" & _
                        " VALUES (" & _
                        rsF("IdFichaCab") & ", " & _
                        iNumNoti & ", " & _
                        ConComillas(Nz(rsF("Email"), "¿?")) & ", " & _
                        ConComillas(rsF("Cliente")) & ", " & _
                        CLng(rsF("FechaLlegada")) & ", " & _
                        CLng(rsF("FechaSalida")) & ", " & _
                        rsF("Pax") & ")"
                CurrentDb.Execute strSQL, dbFailOnError
                'If EnviaNotificacion(rsF("IdFichaCab"), iNumNoti) = True Then
                '    i = i + 1
                '    strMSG = strMSG & "Ficha Nº: " & rsF("IdFichaCab") & "--> Se envió -->" & DameValorParam(rs("NP")) & vbCrLf
                'Else
                '    j = j + 1
                '    strMSG = strMSG & "Ficha Nº: " & rsF("IdFichaCab") & "--> No se pudo enviar -->" & DameValorParam(rs("NP")) & vbCrLf
                'End If
            End If
            rsF.MoveNext
        Wend
Siguiente:
        y = y + 1
        SysCmd acSysCmdSetStatus, "Revisando recordatorios " & y & "/" & z & ", OK: " & i & IIf(j > 0, ", Error: " & j, "")
        'If EnviaRecordatorioReserva(rs("IdFichaCab"), False, False, strMSG, True) = True Then
        '    i = i + 1
        'Else
        '    j = j + 1
        'End If
        rs.MoveNext
    Wend
    
    
    
    If Len(strMSG) > 0 Then strMSG = strMSG & vbCrLf
    If i > 0 Then strMSG = strMSG & "Se " & IIf(i = 1, "envió ", "enviaron ") & i & " notificaci" & IIf(i = 1, "ón", "ones") & vbCrLf
    If j > 0 Then strMSG = strMSG & "No se " & IIf(j = 1, "pudo", "pudieron") & " enviar " & j & " notificaci" & IIf(i = 1, "ón", "ones") & vbCrLf
    If Len(strMSG) > 0 Then MsgBox strMSG, vbInformation
    
HandleExit:
    SysCmd acSysCmdClearStatus
    Exit Sub
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Sub